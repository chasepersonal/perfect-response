# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/perfect-response

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      # Download and install dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python3 manage.py test

      - run:
          name: test zappa package creation
          command: |
            . venv/bin/activate
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              zappa package prod
            else
              zappa package dev
            fi

      - store_artifacts:
          path: test-reports
          destination: test-reports

    deploy:
      steps:
        - restore_cache:
              key: v1-dependencies-{{ checksum "requirements.txt" }}
        - run:
            name: deploy to zappa
            command: |
              . ~/venv/bin/activate

              # set aws credentials
              mkdir -p ~/.aws
              echo -e "[default]" >> ~/.aws/credentials
              echo -e "aws_access_key_id = "$AWS_ACCESS_KEY_ID >> ~/.aws/credentials
              echo -e "aws_secret_access_key = "$AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials

              # set ZAPPA_STAGE env var depending on current branch
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                export ZAPPA_STAGE=prod;
              else
                export ZAPPA_STAGE=dev;
              fi

              # try to update, if the command fails do the initial deploy
              zappa update $ZAPPA_STAGE || zappa deploy $ZAPPA_STAGE;

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build


